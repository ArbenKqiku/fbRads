path   = paste0(ad_id, "/copies?access_token=", fbacc$access_token),
method = "POST",
params = params)
#' @inheritParams fbad_request
#' @param ad_id (numeric string or integer) id of the ad that you want to copy
#' @param adset_id (numeric string or integer) id adset you want to create a copy of the ad into
#' @param status_option (string) enum {ACTIVE, PAUSED, INHERITED_FROM_SOURCE}
#' @param rename_strategy (string) enum {DEEP_RENAME, ONLY_TOP_LEVEL_RENAME, NO_RENAME}
#' @param rename_prefix (string) a prefix to copy names. Defaults to null if not provided
#' @param rename_suffix (string) a suffix to copy names. Defaults to null if not provided
#' @param ... further arguments passed to the API endpoint
#' @export
#' @references \url{https://developers.facebook.com/docs/marketing-api/reference/adgroup/copies#Creating}
fbad_copy_ad <- function(fbacc,
ad_id,
adset_id = NULL,
status_option = NULL,
rename_strategy = NULL,
rename_prefix = NULL,
rename_suffix = NULL, ...) {
fbacc <- fbad_check_fbacc()
# ad id missing
if (missing(ad_id)){
stop('Argument missing. An ad id is required.')
}
# check if ad set id actually exists
list_of_ads = fbad_list_ad(fbacc)
if(!ad_id %in% list_of_ads$id){
stop('This ad id does not exists. Please provide a valid ad id.')
}
# check if adset id actually exists
if(!is.null(adset_id)){
list_of_adsets = fbad_list_adset(fbacc)
if(!adset_id %in% list_of_adsets$id){
stop('This ad set id does not exists. Please provide a valid ad set id.')
}
}
# rename_prefix = NULL
# rename_suffix = NULL
# rename_strategy = "NO_RENAME"
# rename options
if(is.null(rename_strategy) & !is.null(rename_prefix)){
stop("You have not selected a rename_strategy, therefore, you should not select arguments rename_prefix")
}else if(is.null(rename_strategy) & !is.null(rename_suffix)){
stop("You have not selected a rename_strategy, therefore, you should not select arguments rename_suffix")
}else if(is.null(rename_strategy) & !is.null(rename_suffix) & !is.null(rename_prefix)){
stop("You have not selected a rename_strategy, therefore, you should not select arguments rename_suffix or rename_prefix")
}else if(is.null(rename_strategy) & is.null(rename_prefix) & is.null(rename_suffix)){
rename_options = NULL
}else if(rename_strategy == "NO_RENAME" & (!is.null(rename_prefix) | !is.null(rename_suffix))){
stop("Your rename_stratey is 'NO_RENAME', therefore, you should not select arguments rename_prefix or rename_suffix")
}else if((rename_strategy == "DEEP_RENAME" | rename_strategy == "ONLY_TOP_LEVEL_RENAME") & is.null(rename_prefix) & is.null(rename_suffix)){
stop("You have selected 'DEEP_RENAME' or 'ONLY_TOP_LEVEL_RENAME' as the argument rename_strategy. You need to specify either the rename_prefix argument, the rename_suffix argument or both")
}else if(!is.null(rename_strategy) & !is.null(rename_prefix) & !is.null(rename_suffix)){
rename_options = list(rename_strategy = rename_strategy,
rename_prefix = rename_prefix,
rename_suffix = rename_suffix)
}else if(!is.null(rename_strategy) & !is.null(rename_prefix)){
rename_options = list(rename_strategy = rename_strategy,
rename_prefix = rename_prefix)
}else if(!is.null(rename_strategy) & !is.null(rename_suffix)){
rename_options = list(rename_strategy = rename_strategy,
rename_suffix = rename_suffix)
}else if(!is.null(rename_strategy) & is.null(rename_prefix) & is.null(rename_suffix)){
rename_options = list(rename_strategy = rename_strategy)
}
## build params list
params <- list(
adset_id = adset_id,
status_option = status_option,
rename_options = rename_options)
## transform lists to JSON
params$rename_options <- toJSON(rename_options, auto_unbox = TRUE)
## drop NULL args
params <- as.list(unlist(params, recursive = FALSE))
# post request to copy adset
final_request = fbad_request(fbacc,
path   = paste0(ad_id, "/copies?access_token=", fbacc$access_token),
method = "POST",
params = params)
print(final_request)
}
#' @inheritParams fbad_request
#' @param ad_id (numeric string or integer) id of the ad that you want to copy
#' @param adset_id (numeric string or integer) id adset you want to create a copy of the ad into
#' @param status_option (string) enum {ACTIVE, PAUSED, INHERITED_FROM_SOURCE}
#' @param rename_strategy (string) enum {DEEP_RENAME, ONLY_TOP_LEVEL_RENAME, NO_RENAME}
#' @param rename_prefix (string) a prefix to copy names. Defaults to null if not provided
#' @param rename_suffix (string) a suffix to copy names. Defaults to null if not provided
#' @param ... further arguments passed to the API endpoint
#' @export
#' @references \url{https://developers.facebook.com/docs/marketing-api/reference/adgroup/copies#Creating}
fbad_copy_ad <- function(fbacc,
ad_id,
adset_id = NULL,
status_option = NULL,
rename_strategy = NULL,
rename_prefix = NULL,
rename_suffix = NULL, ...) {
fbacc <- fbad_check_fbacc()
# ad id missing
if (missing(ad_id)){
stop('Argument missing. An ad id is required.')
}
# check if ad set id actually exists
list_of_ads = fbad_list_ad(fbacc)
if(!ad_id %in% list_of_ads$id){
stop('This ad id does not exists. Please provide a valid ad id.')
}
# check if adset id actually exists
if(!is.null(adset_id)){
list_of_adsets = fbad_list_adset(fbacc)
if(!adset_id %in% list_of_adsets$id){
stop('This ad set id does not exists. Please provide a valid ad set id.')
}
}
# rename_prefix = NULL
# rename_suffix = NULL
# rename_strategy = "NO_RENAME"
# rename options
if(is.null(rename_strategy) & !is.null(rename_prefix)){
stop("You have not selected a rename_strategy, therefore, you should not select arguments rename_prefix")
}else if(is.null(rename_strategy) & !is.null(rename_suffix)){
stop("You have not selected a rename_strategy, therefore, you should not select arguments rename_suffix")
}else if(is.null(rename_strategy) & !is.null(rename_suffix) & !is.null(rename_prefix)){
stop("You have not selected a rename_strategy, therefore, you should not select arguments rename_suffix or rename_prefix")
}else if(is.null(rename_strategy) & is.null(rename_prefix) & is.null(rename_suffix)){
rename_options = NULL
}else if(rename_strategy == "NO_RENAME" & (!is.null(rename_prefix) | !is.null(rename_suffix))){
stop("Your rename_stratey is 'NO_RENAME', therefore, you should not select arguments rename_prefix or rename_suffix")
}else if((rename_strategy == "DEEP_RENAME" | rename_strategy == "ONLY_TOP_LEVEL_RENAME") & is.null(rename_prefix) & is.null(rename_suffix)){
stop("You have selected 'DEEP_RENAME' or 'ONLY_TOP_LEVEL_RENAME' as the argument rename_strategy. You need to specify either the rename_prefix argument, the rename_suffix argument or both")
}else if(!is.null(rename_strategy) & !is.null(rename_prefix) & !is.null(rename_suffix)){
rename_options = list(rename_strategy = rename_strategy,
rename_prefix = rename_prefix,
rename_suffix = rename_suffix)
}else if(!is.null(rename_strategy) & !is.null(rename_prefix)){
rename_options = list(rename_strategy = rename_strategy,
rename_prefix = rename_prefix)
}else if(!is.null(rename_strategy) & !is.null(rename_suffix)){
rename_options = list(rename_strategy = rename_strategy,
rename_suffix = rename_suffix)
}else if(!is.null(rename_strategy) & is.null(rename_prefix) & is.null(rename_suffix)){
rename_options = list(rename_strategy = rename_strategy)
}
## build params list
params <- list(
adset_id = adset_id,
status_option = status_option,
rename_options = rename_options)
## transform lists to JSON
params$rename_options <- toJSON(rename_options, auto_unbox = TRUE)
## drop NULL args
params <- as.list(unlist(params, recursive = FALSE))
# post request to copy adset
final_request = fbad_request(fbacc,
path   = paste0(ad_id, "/copies?access_token=", fbacc$access_token),
method = "POST",
params = params)
print(final_request)
}
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "NO_RENAME"),
expected_output)
# 4.6 Rename strategy tests - status options == "ACTIVE"
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_suffix = "Status==Active"),
expected_output)
# 4.6.1 tatus options == "PAUSED"
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "PAUSED",
rename_strategy = "DEEP_RENAME",
rename_suffix = "Status==Paused"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "PAUSED",
rename_strategy = "DEEP_RENAME",
rename_suffix = "Status==Paused"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_suffix = "Status==Active"),
expected_output)
# 4.6.2 tatus options == "INHERITED_FROM_SOURCE"
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "INHERITED_FROM_SOURCE",
rename_strategy = "DEEP_RENAME",
rename_suffix = "Status==INHERITED_FROM_SOURCE"),
expected_output)
# 4 --------
# 4.1 Rename strategy tests - DEEP_RENAME rename strategy without prefix or suffix
message = "You have selected 'DEEP_RENAME' or 'ONLY_TOP_LEVEL_RENAME' as the argument rename_strategy. You need to specify either the rename_prefix argument, the rename_suffix argument or both"
expect_error(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME"),
message)
# 4.1 Rename strategy tests - no rename strategy with prefix
message = "You have not selected a rename_strategy, therefore"
expect_error(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_prefix = "Prefix"),
message)
# 4.1.1 Rename strategy tests - no rename strategy with suffix
message = "You have not selected a rename_strategy, therefore"
expect_error(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_suffix = "Suffix"),
message)
# 4.1.2 Rename strategy tests - no rename strategy with prefix or suffix
message = "You have not selected a rename_strategy, therefore"
expect_error(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_prefix = "Prefix",
rename_suffix = "Suffix"),
message)
# 4.2 Rename strategy tests - rename strategy == NO_RENAME with prefix
message = "Your rename_stratey is 'NO_RENAME', therefore"
expect_error(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "NO_RENAME",
rename_prefix = "Test"),
message)
# 4.3 Rename strategy tests - rename strategy == NO_RENAME with suffix
message = "Your rename_stratey is 'NO_RENAME', therefore"
expect_error(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "NO_RENAME",
rename_suffix = "Suffix"),
message)
# 4.3.1 Rename strategy tests - rename strategy == NO_RENAME with suffix AND PREFIX
message = "Your rename_stratey is 'NO_RENAME', therefore"
expect_error(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "NO_RENAME",
rename_suffix = "Suffix",
rename_prefix = "Prefix"),
message)
# 4.4 Rename strategy tests - rename strategy == DEEP_RENAME without prefix or suffix
message = "You have selected 'DEEP_RENAME' or 'ONLY_TOP_LEVEL_RENAME' as the argument rename_strategy"
expect_error(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME"),
message)
# 4.5 Rename strategy tests - rename strategy == DEEP_RENAME without prefix or suffix
message = "You have selected 'DEEP_RENAME' or 'ONLY_TOP_LEVEL_RENAME' as the argument rename_strategy"
expect_error(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME"),
message)
# 4.5.1 Rename strategy tests - leaving arguments out all together
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE"),
expected_output)
# 4.5.2 Rename strategy tests - DEEP_RENAME with Suffix
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_suffix = "DEEP_RENAME with Suffix"),
expected_output)
# 4.5.3 Rename strategy tests - DEEP_RENAME with Prefix
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "DEEP_RENAME with Prefix"),
expected_output)
# 4.5.4 Rename strategy tests - DEEP_RENAME with Prefix and Suffix
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_suffix = "Suffix",
rename_prefix = "Prefix"),
expected_output)
# 4.5.5 Rename strategy tests - ONLY_TOP_LEVEL_RENAME with Suffix
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME",
rename_suffix = "ONLY_TOP_LEVEL_RENAME with Suffix"),
expected_output)
# 4.5.6 Rename strategy tests - ONLY_TOP_LEVEL_RENAME with Prefix
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME",
rename_prefix = "ONLY_TOP_LEVEL_RENAME with Prefix"),
expected_output)
# 4.5.6 Rename strategy tests - ONLY_TOP_LEVEL_RENAME with Prefix
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME",
rename_prefix = "ONLY_TOP_LEVEL_RENAME with Prefix"),
expected_output)
# 4.5.7 Rename strategy tests - ONLY_TOP_LEVEL_RENAME with Prefix and Suffix
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME",
rename_suffix = "ONLY_TOP_LEVEL_RENAME with Suffix",
rename_prefix = "ONLY_TOP_LEVEL_RENAME with Prefix"),
expected_output)
# 4.5.7 Rename strategy tests - ONLY_TOP_LEVEL_RENAME with Prefix and Suffix
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME",
rename_suffix = "ONLY_TOP_LEVEL_RENAME with Suffix",
rename_prefix = "ONLY_TOP_LEVEL_RENAME with Prefix"),
expected_output)
# 4.5.7 Rename strategy tests - ONLY_TOP_LEVEL_RENAME with Prefix and Suffix
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME",
rename_suffix = "ONLY_TOP_LEVEL_RENAME with Suffix",
rename_prefix = "ONLY_TOP_LEVEL_RENAME with Prefix"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME",
rename_suffix = "ONLY_TOP_LEVEL_RENAME with Suffix",
rename_prefix = "ONLY_TOP_LEVEL_RENAME with Prefix"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME",
rename_suffix = "Suffix",
rename_prefix = "Prefix"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME",
rename_suffix = "Suffix",
rename_prefix = "Prefix"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME",
rename_suffix = "Suffix",
rename_prefix = "Prefix"),
expected_output)
# 4.6.2 tatus options == "INHERITED_FROM_SOURCE"
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "INHERITED_FROM_SOURCE",
rename_strategy = "DEEP_RENAME",
rename_suffix = "Status==INHERITED_FROM_SOURCE"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME",
rename_prefix = "ONLY_TOP_LEVEL_RENAME with Prefix"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME",
rename_suffix = "Suffix",
rename_prefix = "Prefix"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME",
rename_suffix = "Suffix",
rename_prefix = "Prefix"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "ONLY_TOP_LEVEL_RENAME",
rename_suffix = "Suffix",
rename_prefix = "Prefix"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "NO_RENAME"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_suffix = "Status==Active"),
expected_output)
# 4.6.1 tatus options == "PAUSED"
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "PAUSED",
rename_strategy = "DEEP_RENAME",
rename_suffix = "Status==Paused"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "PAUSED",
rename_strategy = "DEEP_RENAME",
rename_suffix = "Status==Paused"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_suffix = "Status==Active"),
expected_output)
# 4.6.1 tatus options == "PAUSED"
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "PAUSED",
rename_strategy = "DEEP_RENAME",
rename_suffix = "Status==Paused"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "PAUSED",
rename_strategy = "DEEP_RENAME",
rename_suffix = "Status==Paused"),
expected_output)
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "INHERITED_FROM_SOURCE",
rename_strategy = "DEEP_RENAME",
rename_suffix = "Status==INHERITED_FROM_SOURCE"),
expected_output)
## transform lists to JSON
params$rename_options <- toJSON(rename_options, auto_unbox = TRUE)
params
