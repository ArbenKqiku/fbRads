status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "Morning-2")
fbad_copy_adset(fbacc,
adset_id = "23845893193900648",
campaign_id = campaign_id,
deep_copy = TRUE,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "Morning-2")
fbad_copy_adset(fbacc,
adset_id = "23845893193900648",
campaign_id = campaign_id,
deep_copy = TRUE,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "Morning-2")
campaign_id = "23845893051630648"
fbad_copy_campaign(fbacc,
campaign_id = campaign_id,
deep_copy = TRUE,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "Morning-2")
fbad_copy_campaign(fbacc,
campaign_id = "feafeafae",
deep_copy = TRUE,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "Morning-2")
fbad_copy_campaign(fbacc,
deep_copy = TRUE,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "Morning-2")
fbad_copy_campaign(fbacc,
campaign_id = "xxxxxxxxxx",
deep_copy = FALSE,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "Morning-2")
fbad_copy_campaign(fbacc,
campaign_id = "23845893051630648",
deep_copy = FALSE,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "Morning-2")
adset_id = "23845914580180648"
ad_id = "23845914580210648"
#' @inheritParams fbad_request
#' @param ad_id (numeric string or integer) id of the ad that you want to copy
#' @param adset_id (numeric string or integer) id adset you want to create a copy of the ad into
#' @param status_option (string) enum {ACTIVE, PAUSED, INHERITED_FROM_SOURCE}
#' @param rename_strategy (string) enum {DEEP_RENAME, ONLY_TOP_LEVEL_RENAME, NO_RENAME}
#' @param rename_prefix (string) a prefix to copy names. Defaults to null if not provided
#' @param rename_suffix (string) a suffix to copy names. Defaults to null if not provided
#' @param ... further arguments passed to the API endpoint
#' @export
#' @references \url{https://developers.facebook.com/docs/marketing-api/reference/ad-campaign/copies/}
fbad_copy_ad <- function(fbacc,
ad_id,
adset_id = NULL,
status_option = NULL,
rename_strategy = NULL,
rename_prefix = NULL,
rename_suffix = NULL, ...) {
fbacc <- fbad_check_fbacc()
# ad id missing
if (missing(ad_id)){
stop('Argument missing. An ad id is required.')
}
# check if ad set id actually exists
list_of_ads = fbad_list_ad(fbacc)
if(!ad_id %in% list_of_ads$id){
stop('This ad id does not exists. Please provide a valid ad id.')
}
# check if adset id actually exists
if(!is.null(adset_id)){
list_of_adsets = fbad_list_adset(fbacc)
if(!adset_id %in% list_of_adsets$id){
stop('This ad set id does not exists. Please provide a valid ad set id.')
}
}
# rename options
if(is.null(rename_strategy)){
rename_options = NULL
}else if((rename_strategy == "DEEP_RENAME" | rename_strategy == "ONLY_TOP_LEVEL_RENAME") & is.null(rename_prefix) & is.null(rename_suffix)){
stop("You have selected 'DEEP_RENAME' or 'ONLY_TOP_LEVEL_RENAME' as the argument rename_strategy. You need to specify either the rename_prefix argument, the rename_suffix argument or both")
}else if(rename_strategy == "NO_RENAME" & !is.null(rename_prefix) || !is.null(rename_suffix)){
stop("Your rename_stratey is 'NO_RENAME', therefore, you should not select arguments rename_prefix or rename_suffix")
}else if(!is.null(rename_strategy) & !is.null(rename_prefix)){
rename_options = list(rename_strategy = rename_strategy,
rename_prefix = rename_prefix)
}else if(!is.null(rename_strategy) & !is.null(rename_suffix)){
rename_options = list(rename_strategy = rename_strategy,
rename_suffix = rename_suffix)
}else if(is.null(rename_prefix) & is.null(rename_suffix) & !is.null(rename_suffix)){
rename_options = list(rename_strategy = rename_strategy)
}
## build params list
params <- list(
adset_id = adset_id,
status_option = status_option,
rename_options = rename_options)
## transform lists to JSON
params$rename_options <- toJSON(rename_options, auto_unbox = TRUE)
## drop NULL args
params <- as.list(unlist(params, recursive = FALSE))
# post request to copy adset
fbad_request(fbacc,
path   = paste0(ad_id, "/copies?access_token=", fbacc$access_token),
method = "POST",
params = params)
}
#' @inheritParams fbad_request
#' @param ad_id (numeric string or integer) id of the ad that you want to copy
#' @param adset_id (numeric string or integer) id adset you want to create a copy of the ad into
#' @param status_option (string) enum {ACTIVE, PAUSED, INHERITED_FROM_SOURCE}
#' @param rename_strategy (string) enum {DEEP_RENAME, ONLY_TOP_LEVEL_RENAME, NO_RENAME}
#' @param rename_prefix (string) a prefix to copy names. Defaults to null if not provided
#' @param rename_suffix (string) a suffix to copy names. Defaults to null if not provided
#' @param ... further arguments passed to the API endpoint
#' @export
#' @references \url{https://developers.facebook.com/docs/marketing-api/reference/ad-campaign/copies/}
fbad_copy_ad <- function(fbacc,
ad_id,
adset_id = NULL,
status_option = NULL,
rename_strategy = NULL,
rename_prefix = NULL,
rename_suffix = NULL, ...) {
fbacc <- fbad_check_fbacc()
# ad id missing
if (missing(ad_id)){
stop('Argument missing. An ad id is required.')
}
# check if ad set id actually exists
list_of_ads = fbad_list_ad(fbacc)
if(!ad_id %in% list_of_ads$id){
stop('This ad id does not exists. Please provide a valid ad id.')
}
# check if adset id actually exists
if(!is.null(adset_id)){
list_of_adsets = fbad_list_adset(fbacc)
if(!adset_id %in% list_of_adsets$id){
stop('This ad set id does not exists. Please provide a valid ad set id.')
}
}
# rename options
if(is.null(rename_strategy)){
rename_options = NULL
}else if((rename_strategy == "DEEP_RENAME" | rename_strategy == "ONLY_TOP_LEVEL_RENAME") & is.null(rename_prefix) & is.null(rename_suffix)){
stop("You have selected 'DEEP_RENAME' or 'ONLY_TOP_LEVEL_RENAME' as the argument rename_strategy. You need to specify either the rename_prefix argument, the rename_suffix argument or both")
}else if(rename_strategy == "NO_RENAME" & !is.null(rename_prefix) || !is.null(rename_suffix)){
stop("Your rename_stratey is 'NO_RENAME', therefore, you should not select arguments rename_prefix or rename_suffix")
}else if(!is.null(rename_strategy) & !is.null(rename_prefix)){
rename_options = list(rename_strategy = rename_strategy,
rename_prefix = rename_prefix)
}else if(!is.null(rename_strategy) & !is.null(rename_suffix)){
rename_options = list(rename_strategy = rename_strategy,
rename_suffix = rename_suffix)
}else if(is.null(rename_prefix) & is.null(rename_suffix) & !is.null(rename_suffix)){
rename_options = list(rename_strategy = rename_strategy)
}
## build params list
params <- list(
adset_id = adset_id,
status_option = status_option,
rename_options = rename_options)
## transform lists to JSON
params$rename_options <- toJSON(rename_options, auto_unbox = TRUE)
## drop NULL args
params <- as.list(unlist(params, recursive = FALSE))
# post request to copy adset
fbad_request(fbacc,
path   = paste0(ad_id, "/copies?access_token=", fbacc$access_token),
method = "POST",
params = params)
}
fbad_copy_ad(fbacc,
ad_id = ad_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "Morning-2")
adset_id = "23845893193900648"
fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "Morning-2")
library(testthat)
expected_output = "copied_ad_id\"
expect_output()
fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "Morning-2")
expected_output = "copied_ad_id"
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "Morning-2"),
expected_output)
#' @inheritParams fbad_request
#' @param ad_id (numeric string or integer) id of the ad that you want to copy
#' @param adset_id (numeric string or integer) id adset you want to create a copy of the ad into
#' @param status_option (string) enum {ACTIVE, PAUSED, INHERITED_FROM_SOURCE}
#' @param rename_strategy (string) enum {DEEP_RENAME, ONLY_TOP_LEVEL_RENAME, NO_RENAME}
#' @param rename_prefix (string) a prefix to copy names. Defaults to null if not provided
#' @param rename_suffix (string) a suffix to copy names. Defaults to null if not provided
#' @param ... further arguments passed to the API endpoint
#' @export
#' @references \url{https://developers.facebook.com/docs/marketing-api/reference/ad-campaign/copies/}
fbad_copy_ad <- function(fbacc,
ad_id,
adset_id = NULL,
status_option = NULL,
rename_strategy = NULL,
rename_prefix = NULL,
rename_suffix = NULL, ...) {
fbacc <- fbad_check_fbacc()
# ad id missing
if (missing(ad_id)){
stop('Argument missing. An ad id is required.')
}
# check if ad set id actually exists
list_of_ads = fbad_list_ad(fbacc)
if(!ad_id %in% list_of_ads$id){
stop('This ad id does not exists. Please provide a valid ad id.')
}
# check if adset id actually exists
if(!is.null(adset_id)){
list_of_adsets = fbad_list_adset(fbacc)
if(!adset_id %in% list_of_adsets$id){
stop('This ad set id does not exists. Please provide a valid ad set id.')
}
}
# rename options
if(is.null(rename_strategy)){
rename_options = NULL
}else if((rename_strategy == "DEEP_RENAME" | rename_strategy == "ONLY_TOP_LEVEL_RENAME") & is.null(rename_prefix) & is.null(rename_suffix)){
stop("You have selected 'DEEP_RENAME' or 'ONLY_TOP_LEVEL_RENAME' as the argument rename_strategy. You need to specify either the rename_prefix argument, the rename_suffix argument or both")
}else if(rename_strategy == "NO_RENAME" & !is.null(rename_prefix) || !is.null(rename_suffix)){
stop("Your rename_stratey is 'NO_RENAME', therefore, you should not select arguments rename_prefix or rename_suffix")
}else if(!is.null(rename_strategy) & !is.null(rename_prefix)){
rename_options = list(rename_strategy = rename_strategy,
rename_prefix = rename_prefix)
}else if(!is.null(rename_strategy) & !is.null(rename_suffix)){
rename_options = list(rename_strategy = rename_strategy,
rename_suffix = rename_suffix)
}else if(is.null(rename_prefix) & is.null(rename_suffix) & !is.null(rename_suffix)){
rename_options = list(rename_strategy = rename_strategy)
}
## build params list
params <- list(
adset_id = adset_id,
status_option = status_option,
rename_options = rename_options)
## transform lists to JSON
params$rename_options <- toJSON(rename_options, auto_unbox = TRUE)
## drop NULL args
params <- as.list(unlist(params, recursive = FALSE))
# post request to copy adset
final_request = fbad_request(fbacc,
path   = paste0(ad_id, "/copies?access_token=", fbacc$access_token),
method = "POST",
params = params)
print(final_request)
}
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
adset_id = adset_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "Morning-2"),
expected_output)
expected_output
# 1.2 No adset_id
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
status_option = "ACTIVE",
rename_strategy = "DEEP_RENAME",
rename_prefix = "Morning-2"),
expected_output)
# 1.2 Status option
expect_output(fbad_copy_ad(fbacc,
ad_id = ad_id,
rename_strategy = "DEEP_RENAME",
rename_prefix = "Evening-2"),
expected_output)
# install.packages("tidyverse")
# install.packages("lubridate")
# install.packages("dplyr")
# install.packages("writexl")
# install.packages("RAdwords")
library(tidyverse)
library(lubridate)
library(writexl)
library(RAdwords)
library(googlesheets4)
# 1.2 Parameters----
account          = "567-480-3174"
start_date       = "2020-04-29"
end_date         = today()-ddays(1)
google_auth_path = "google_ads_auth.RData"
# 2 Functions ----
# 2.1 load google ads credentials -----
source(file = 'functions.R')
# 3 Import Data ----
# 3.1 Load credentials ----
load.credentials(google_auth_path)
# 3.2 Get data ----
campaign_data = get.campaign.data(
account,
.reportName    = "CAMPAIGN_PERFORMANCE_REPORT",
.reportMetrics = c('CampaignName','CampaignStatus','ServingStatus','Date','Amount','Cost','ConversionValue'),
date_from      = start_date,
date_to        = end_date
) %>%
as_tibble() %>%
filter(Campaignstate == "enabled",
Campaignservingstatus == "eligible") %>%
set_names(names(.) %>% str_to_lower()) %>%
rename(conversion_value = conversionvalue)
# 3.2.1 Calculate daily budget balance:
# calculate total budget available
#   Are these parameters? ⬇️
budget_adj_factor <-  0.75
total_budget      <-  2000000
# Total Budget spent:
total_spent_to_date <- sum(campaign_data$cost)
total_budget_left   <-  total_budget - total_spent_to_date
# calculate how many days until the end of the budget split period
total_days_left = ( as_date("2021-04-28")  - end_date) %>%
as.numeric()
# Alternatively to the above:
as.numeric(difftime(time1 = as_date("2021-04-28"),time2 = end_date,units = 'days' ))
# calculate total daily budget balance
total_daily_budget_left = total_budget_left / total_days_left
total_daily_budget_left_core_activities = total_daily_budget_left * 0.30
total_daily_budget_left_brand = total_daily_budget_left * 0.10
total_daily_budget_left_melons = 659
total_daily_budget_left_finance = 99
total_daily_budget_left_other_campaigns = total_daily_budget_left - total_daily_budget_left_core_activities - total_daily_budget_left_brand - total_daily_budget_left_melons - total_daily_budget_left_finance
# 4 Data Prep ----
# 4.1.1 get the first impression day per campaign ----
campaign_first_impression_day =
campaign_data %>%
# calculate first impression day
mutate(frequency = 1) %>%
group_by(campaign) %>%
arrange(day) %>%
mutate(cum_impr_day = cumsum(frequency)) %>%
ungroup() %>%
# keep only the date with the first impression
filter(cum_impr_day == 1) %>%
# select only campaigns and dates
select(campaign, day) %>%
# set names
set_names(c("campaign", "date_1st_impr"))
# 4.1.2 get cost and conversion value per active days ----
campaign_active_days =
campaign_data %>%
rename(current_daily_budget = budget) %>%
# summarize by campaign
group_by(campaign, current_daily_budget) %>%
summarize(total_days = n(),
cost = sum(cost ),
conversion_value = sum(conversion_value)) %>%
ungroup() %>%
# get unique values
# distinct() %>%  # not necessary - A group by will always give the distinct values
# calculate metrics per active days
mutate(cost_act_days = (cost / total_days) %>% round(digits = 2),
conv_val_act_days = (conversion_value / total_days) %>% round(digits = 2)) %>%
# keep only active days columns and campaign
select(-c(cost,conversion_value,total_days)) %>%
#  Calculate the return on ads spent
mutate(roas = (conv_val_act_days / cost_act_days) %>% round(digits = 2))
# 4.2 Create adjustment factor column ----
# 4.3 calculate average roas to use as adjustment factor parameter ----
average_roas = sum(campaign_active_days$conv_val_act_days)/sum(campaign_active_days$cost_act_days)
# 4.4 adjust budgets per active days for ww-en brand and ww-en core activities ----
campaign_budget_core_brand_tbl =
campaign_active_days %>%
filter(campaign %in% c("WW-EN Search Core Activities", "WW-EN Search Brand Protection", "WW-EN Display Sectors Fruits Melon", "WW-EN Search Services Trade Finance")) %>%
mutate(
date_1st_impr     = "Manual",
daily_budget      = NA_real_,
adjustment_factor = NA_real_,
pct_conv_value    = "Manual",
theo_daily_budget = NA_real_,
adj_daily_budget  = NA_real_,
minimum_budget    = NA_real_
) %>%
# add daily budget for ww-en brand and ww-en core activities campaigns
# attributed the maximum between minimum_budget and adj_daily_budget for other campaigns
mutate(daily_budget = case_when(
campaign %>% str_detect("WW-EN Search Core Activities") ~ round(total_daily_budget_left_core_activities,2),
campaign %>% str_detect("WW-EN Search Brand Protection") ~ round(total_daily_budget_left_brand,2),
campaign %>% str_detect("WW-EN Display Sectors Fruits Melon") ~ round(total_daily_budget_left_melons,2),
campaign %>% str_detect("WW-EN Search Services Trade Finance") ~ round(total_daily_budget_left_finance,2)
)) %>%
# add daily_budget_evolution %>%
mutate(daily_budget_evolution = scales::percent(daily_budget/current_daily_budget-1,accuracy = 1)) %>%
# rename daily budget for Google Ads editor
rename(`daily budget` = daily_budget) %>%
select(campaign, date_1st_impr, `daily budget`, current_daily_budget, daily_budget_evolution, cost_act_days,
conv_val_act_days, roas, adjustment_factor, pct_conv_value, theo_daily_budget, adj_daily_budget,
minimum_budget)
# 4.5 adjust budgets per active days for other campaigns other than ww-en brand and ww-en core activities ----
campaign_budget_others_tbl = campaign_active_days %>%
filter(!campaign %in% c("WW-EN Search Core Activities", "WW-EN Search Brand Protection",
"WW-EN Display Sectors Fruits Melon", "WW-EN Search Services Trade Finance")) %>%
mutate(roas = conv_val_act_days / cost_act_days) %>%
# add adjustment factor
mutate(adjustment_factor = case_when(
roas > average_roas * 2 ~ 2,
roas > average_roas * 1 ~ 1.5,
TRUE ~ 1)) %>%
# add percentage of total conversion value per active day
mutate(pct_conv_value = conv_val_act_days / sum(conv_val_act_days)) %>%
# calculate theoretical daily budget
mutate(theo_daily_budget = (pct_conv_value * total_daily_budget_left_other_campaigns) %>% round(digits = 2)) %>%
# change pct conversion value to a percentage format
mutate(pct_conv_value = pct_conv_value %>% scales::percent(accuracy = 0.01)) %>%
# calculate adjusted daily budget
mutate(adj_daily_budget = (theo_daily_budget * adjustment_factor) %>% round(digits = 2)) %>%
# add minimum budget column
mutate(minimum_budget = case_when(
roas > average_roas ~ 49.99,
TRUE ~ 14.99
)) %>%
mutate(daily_budget = case_when(
adj_daily_budget > minimum_budget ~ adj_daily_budget,
TRUE ~ minimum_budget)) %>%
# round to 2 digits
mutate(
daily_budget = daily_budget %>% round(digits = 2),
roas = roas %>% round(digits = 2)) %>%
# add day with first impressions
left_join(campaign_first_impression_day, by = c("campaign" = "campaign")) %>%
select(campaign, date_1st_impr, everything()) %>%
# rename daily budget for Google Ads editor
rename(`daily budget` = daily_budget) %>%
# add daily_budget_evolution %>%
mutate(daily_budget_evolution = `daily budget`/current_daily_budget-1) %>%
mutate(daily_budget_evolution = daily_budget_evolution %>% scales::percent()) %>%
select(campaign, date_1st_impr, `daily budget`, current_daily_budget, daily_budget_evolution, everything()) %>%
# change date_1_st_impr to character
mutate(date_1st_impr = date_1st_impr %>% as.character()) %>%
# calculate the percentage budget of each campaign
mutate(budget_pct = `daily budget` / sum(`daily budget`))
# 4.6 join all campaigns together ----
campaign_budget_tbl = campaign_budget_core_brand_tbl %>%
bind_rows(campaign_budget_others_tbl) %>%
mutate(budget_pct = `daily budget` / sum(`daily budget`)) %>%
mutate(daily_budget_adj = budget_pct * (sum(`daily budget`) * budget_adj_factor)) %>%
mutate(daily_budget_adj = case_when(
campaign %>% str_detect("WW-EN Search Services Trade Finance") ~ total_daily_budget_left_finance,
TRUE ~ daily_budget_adj
)) %>%
select(-`daily budget`) %>%
rename(`daily budget` = daily_budget_adj) %>%
mutate(daily_budget_evolution = `daily budget`/current_daily_budget-1) %>%
mutate(daily_budget_evolution = daily_budget_evolution %>% scales::percent())
daily_cumulative_budget_sum = sum(campaign_budget_tbl$`daily budget`)
# 5.1 create parameters tibble ----
# 5.1.1 calculate cumulative roas ----
cumulative_roas = campaign_data %>%
summarize(cost = cost %>% sum(),
conversion_value = conversion_value %>% sum()) %>%
mutate(cumulative_roas = (conversion_value / cost) %>% round(digits = 2)) %>%
pull(cumulative_roas)
# 5.1.2 fill out parameters ----
parameters = tibble(
start_date = start_date,
end_date = end_date,
cumulative_roas = cumulative_roas,
final_budget_date = "2021-04-28" %>% ymd(),
total_budget = total_budget,
total_spent_to_date = total_spent_to_date %>% round(digits = 2),
total_budget_left = total_budget_left %>% round(digits = 2),
total_days_left = total_days_left %>% round(digits = 2),
total_daily_budget_left = total_daily_budget_left %>% round(digits = 2),
total_daily_budget_left_core_activities = total_daily_budget_left_core_activities %>% round(digits = 2),
total_daily_budget_left_brand = total_daily_budget_left_brand %>% round(digits = 2),
total_daily_budget_left_other_campaigns = total_daily_budget_left_other_campaigns %>% round(digits = 2),
budget_adj_factor = budget_adj_factor,
daily_cumulative_budget_sum = daily_cumulative_budget_sum
)
library(tidyverse)
library(lubridate)
library(writexl)
library(RAdwords)
library(googlesheets4)
# 1.2 Parameters----
account          = "567-480-3174"
start_date       = "2020-04-29"
end_date         = today()-ddays(1)
google_auth_path = "google_ads_auth.RData"
# 2 Functions ----
# 2.1 load google ads credentials -----
source(file = 'functions.R')
# 3 Import Data ----
# 3.1 Load credentials ----
load.credentials(google_auth_path)
